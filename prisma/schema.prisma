// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id              String    @id @default(cuid())
  vanityUrl       String?   @unique
  name            String?
  bio             String?
  address         String?
  occupation      String?
  email           String?   @unique
  emailVerified   DateTime?
  image           String?
  views           Int?
  blogPinned      String? //refer to blogId only
  interests       String[]
  socials         Json[] //refer to UserSocials type in types/user.ts
  followers       Int?
  viewsVisibility Boolean   @default(true)
  createdAt       DateTime  @default(now())
  accounts        Account[]
  sessions        Session[]
  blog            Blog[]

  @@unique([id, name])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Blog {
  id              String   @id @default(cuid())
  userId          String
  author          String
  coverImage      String?
  title           String
  description     String
  content         Json
  series          String?
  tags            String[]
  views           Int?
  readPerMinute   Int
  new             Boolean  @default(true)
  viewsVisibility Boolean  @default(true)
  published       Boolean  @default(false)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  user            User     @relation(fields: [userId, author], references: [id, name])
}

model Category {
  id   String @id @default(uuid())
  name String
}
