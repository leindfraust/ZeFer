// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex", "multiSchema"]
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
  schemas           = ["users", "sessions", "posts", "tags", "apikey"]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@schema("users")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@schema("sessions")
}

model User {
  id                    String               @id @default(cuid())
  username              String?              @unique
  name                  String?
  bio                   String?
  address               String?
  occupation            String?
  email                 String?              @unique
  emailVerified         DateTime?
  image                 String
  views                 Int?
  readingHistory        PostReadingHistory[]
  bookMarks             Post[]               @relation("Bookmarks")
  pinned                String? //refer to postId only
  interests             String[]
  series                PostSeries[]
  socials               Json[] //refer to UserSocials type in types/user.ts
  followedBy            User[]               @relation("UserFollows")
  following             User[]               @relation("UserFollows")
  createdAt             DateTime             @default(now())
  apiKeys               ApiKey[]
  comments              PostComment[]
  accounts              Account[]
  sessions              Session[]
  draft                 PostDraft?
  post                  Post[]
  commentReactions      CommentReaction[]
  postReactions         PostReaction[]
  sendNotificationEmail Boolean              @default(true)
  sendNotificationPhone Boolean              @default(false)
  notifications         UserNotifications[]
  sentNotifications     UserNotifications[]  @relation("UserNotificationsFromUser")

  @@unique([id, name, image])
  @@unique([id, name, username, image])
  @@schema("users")
}

model ApiKey {
  id           String          @id @default(cuid())
  name         String
  organization String?
  key          String          @unique
  lastUsed     DateTime?
  usage        ApiKeyRequest[]
  createdAt    DateTime        @default(now())
  ownerId      String
  user         User            @relation(fields: [ownerId], references: [id])
  isActive     Boolean         @default(true)

  @@schema("apikey")
}

model ApiKeyRequest {
  id          String   @id @default(cuid())
  apiKeyId    String
  requestSize Int
  createdAt   DateTime @default(now())
  apiKey      ApiKey   @relation(fields: [apiKeyId], references: [id])

  @@schema("apikey")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@schema("sessions")
}

model Post {
  id                   String               @id @default(cuid())
  userId               String
  author               String
  authorUsername       String?
  authorImage          String
  coverImage           String?
  title                String
  titleId              String               @unique
  isBookmarkedBy       User[]               @relation("Bookmarks")
  reactions            PostReaction[]
  comments             PostComment[]
  description          String
  content              Json
  series               PostSeries[]
  tags                 String[]
  postReadingHistories PostReadingHistory[]
  postReadingLength    PostReadingLength[]
  views                PostView[]
  readPerMinute        Int
  activities           UserNotifications[]
  published            Boolean              @default(false)
  createdAt            DateTime             @default(now())
  updatedAt            DateTime             @updatedAt
  user                 User                 @relation(fields: [userId, author, authorImage], references: [id, name, image])

  @@schema("posts")
}

model PostDraft {
  id          String   @id @default(uuid())
  title       String?
  description String?
  content     Json?
  tags        String[]
  coverImage  String?
  userId      String   @unique
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@schema("posts")
}

model PostSeries {
  id          String   @id @default(uuid())
  title       String
  description String?
  authorId    String
  posts       Post[]
  author      User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  updatedAt   DateTime @default(now()) @updatedAt

  @@schema("posts")
}

model PostView {
  id        String   @id @default(uuid())
  postId    String
  createdAt DateTime @default(now())
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@schema("posts")
}

//This is for registered users only
model PostReadingHistory {
  id              String            @id @default(uuid())
  userId          String
  postId          String
  readingLengthId String            @unique
  readingLength   PostReadingLength @relation(fields: [readingLengthId], references: [id])
  post            Post              @relation(fields: [postId], references: [id], onDelete: Cascade)
  user            User              @relation(fields: [userId], references: [id])
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt

  @@unique([userId, postId])
  @@schema("posts")
}

model PostReadingLength {
  id                 String              @id @default(uuid())
  postId             String
  readingLength      Int
  postReadingHistory PostReadingHistory?
  post               Post                @relation(fields: [postId], references: [id], onDelete: Cascade)
  createdAt          DateTime            @default(now())

  @@schema("posts")
}

model PostComment {
  id                 String            @id @default(uuid())
  postId             String
  userId             String
  userName           String
  userImage          String
  userUsername       String?
  content            Json
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  postCommentReplyId String?
  postCommentReplies PostComment[]     @relation("PostCommentReply")
  postCommentReply   PostComment?      @relation("PostCommentReply", fields: [postCommentReplyId], references: [id])
  reactions          CommentReaction[]
  user               User?             @relation(fields: [userId, userName, userUsername, userImage], references: [id, name, username, image], onDelete: Cascade)
  post               Post              @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@schema("posts")
}

model CommentReaction {
  id        String      @id @default(uuid())
  commentId String
  userId    String
  userName  String
  userImage String
  type      String
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  comment   PostComment @relation(fields: [commentId], references: [id])
  user      User        @relation(fields: [userId, userName, userImage], references: [id, name, image], onDelete: Cascade)

  @@unique([commentId, userId])
  @@schema("posts")
}

model PostReaction {
  id        String   @id @default(uuid())
  postId    String
  userId    String
  userName  String
  userImage String
  type      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId, userName, userImage], references: [id, name, image], onDelete: Cascade)
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([postId, userId])
  @@schema("posts")
}

model UserNotifications {
  id         String   @id @default(uuid())
  userId     String
  postId     String?
  fromUserId String?
  from       String?
  fromImage  String?
  message    String
  post       Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
  actionUrl  String
  createdAt  DateTime @default(now())
  new        Boolean  @default(true)
  user       User     @relation(fields: [userId], references: [id])
  fromUser   User?    @relation("UserNotificationsFromUser", fields: [fromUserId], references: [id])

  @@schema("users")
}

model TagsRanking {
  id        String   @id @default(uuid())
  data      Json[]
  createdAt DateTime @default(now())

  @@schema("tags")
}
