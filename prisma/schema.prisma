// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex", "multiSchema"]
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
  schemas           = ["users", "sessions", "posts", "tags"]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@schema("users")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@schema("sessions")
}

model User {
  id              String     @id @default(cuid())
  username        String?    @unique
  name            String?
  bio             String?
  address         String?
  occupation      String?
  email           String?    @unique
  emailVerified   DateTime?
  image           String
  views           Int?
  bookMarks       Post[]     @relation("Bookmarks") //this hasn't migrated yet because it will fail
  pinned          String? //refer to postId only
  interests       String[]
  socials         Json[] //refer to UserSocials type in types/user.ts
  followedBy      User[]     @relation("UserFollows")
  following       User[]     @relation("UserFollows")
  viewsVisibility Boolean    @default(true)
  createdAt       DateTime   @default(now())
  accounts        Account[]
  sessions        Session[]
  draft           PostDraft?
  post            Post[]

  @@unique([id, name, image])
  @@schema("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@schema("sessions")
}

model Post {
  id              String         @id @default(cuid())
  userId          String
  author          String
  authorUsername  String?
  authorImage     String
  coverImage      String?
  title           String
  titleId         String         @unique
  isBookmarkedBy  User[]         @relation("Bookmarks")
  reactions       PostReaction[]
  comments        PostComment[]
  description     String
  content         Json
  series          String?
  tags            String[]
  views           PostView[]
  readPerMinute   Int
  new             Boolean        @default(true)
  viewsVisibility Boolean        @default(true)
  published       Boolean        @default(false)
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  user            User           @relation(fields: [userId, author, authorImage], references: [id, name, image])

  @@schema("posts")
}

model PostDraft {
  id          String   @id @default(uuid())
  title       String?
  description String?
  content     Json?
  tags        String[]
  coverImage  String?
  userId      String   @unique
  user        User     @relation(fields: [userId], references: [id])

  @@schema("posts")
}

model PostView {
  id        String   @id @default(uuid())
  userId    String
  postId    String
  createdAt DateTime @default(now())
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@schema("posts")
}

model PostComment {
  id                 String        @id @default(uuid())
  postId             String
  userId             String
  message            String
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt
  postCommentReplyId String?
  postCommentReplies PostComment[] @relation("PostCommentReply")
  postCommentReply   PostComment?  @relation("PostCommentReply", fields: [postCommentReplyId], references: [id])
  post               Post          @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@schema("posts")
}

model PostReaction {
  id        String   @id @default(uuid())
  postId    String
  userId    String
  type      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@schema("posts")
}

model TagsRanking {
  id        String   @id @default(uuid())
  data      Json[]
  createdAt DateTime @default(now())

  @@schema("tags")
}
